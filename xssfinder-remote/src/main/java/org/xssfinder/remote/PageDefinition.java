/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.xssfinder.remote;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PageDefinition implements org.apache.thrift.TBase<PageDefinition, PageDefinition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageDefinition");

  private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField("methods", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField CRAWL_START_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlStartPoint", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField START_POINT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("startPointUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageDefinitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageDefinitionTupleSchemeFactory());
  }

  public String identifier; // required
  public Set<MethodDefinition> methods; // required
  public boolean crawlStartPoint; // required
  public String startPointUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDENTIFIER((short)1, "identifier"),
    METHODS((short)2, "methods"),
    CRAWL_START_POINT((short)3, "crawlStartPoint"),
    START_POINT_URL((short)4, "startPointUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDENTIFIER
          return IDENTIFIER;
        case 2: // METHODS
          return METHODS;
        case 3: // CRAWL_START_POINT
          return CRAWL_START_POINT;
        case 4: // START_POINT_URL
          return START_POINT_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CRAWLSTARTPOINT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.START_POINT_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHODS, new org.apache.thrift.meta_data.FieldMetaData("methods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MethodDefinition.class))));
    tmpMap.put(_Fields.CRAWL_START_POINT, new org.apache.thrift.meta_data.FieldMetaData("crawlStartPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_POINT_URL, new org.apache.thrift.meta_data.FieldMetaData("startPointUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageDefinition.class, metaDataMap);
  }

  public PageDefinition() {
  }

  public PageDefinition(
    String identifier,
    Set<MethodDefinition> methods,
    boolean crawlStartPoint)
  {
    this();
    this.identifier = identifier;
    this.methods = methods;
    this.crawlStartPoint = crawlStartPoint;
    setCrawlStartPointIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageDefinition(PageDefinition other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    if (other.isSetMethods()) {
      Set<MethodDefinition> __this__methods = new HashSet<MethodDefinition>();
      for (MethodDefinition other_element : other.methods) {
        __this__methods.add(new MethodDefinition(other_element));
      }
      this.methods = __this__methods;
    }
    this.crawlStartPoint = other.crawlStartPoint;
    if (other.isSetStartPointUrl()) {
      this.startPointUrl = other.startPointUrl;
    }
  }

  public PageDefinition deepCopy() {
    return new PageDefinition(this);
  }

  @Override
  public void clear() {
    this.identifier = null;
    this.methods = null;
    setCrawlStartPointIsSet(false);
    this.crawlStartPoint = false;
    this.startPointUrl = null;
  }

  public String getIdentifier() {
    return this.identifier;
  }

  public PageDefinition setIdentifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  public int getMethodsSize() {
    return (this.methods == null) ? 0 : this.methods.size();
  }

  public java.util.Iterator<MethodDefinition> getMethodsIterator() {
    return (this.methods == null) ? null : this.methods.iterator();
  }

  public void addToMethods(MethodDefinition elem) {
    if (this.methods == null) {
      this.methods = new HashSet<MethodDefinition>();
    }
    this.methods.add(elem);
  }

  public Set<MethodDefinition> getMethods() {
    return this.methods;
  }

  public PageDefinition setMethods(Set<MethodDefinition> methods) {
    this.methods = methods;
    return this;
  }

  public void unsetMethods() {
    this.methods = null;
  }

  /** Returns true if field methods is set (has been assigned a value) and false otherwise */
  public boolean isSetMethods() {
    return this.methods != null;
  }

  public void setMethodsIsSet(boolean value) {
    if (!value) {
      this.methods = null;
    }
  }

  public boolean isCrawlStartPoint() {
    return this.crawlStartPoint;
  }

  public PageDefinition setCrawlStartPoint(boolean crawlStartPoint) {
    this.crawlStartPoint = crawlStartPoint;
    setCrawlStartPointIsSet(true);
    return this;
  }

  public void unsetCrawlStartPoint() {
    __isset_bit_vector.clear(__CRAWLSTARTPOINT_ISSET_ID);
  }

  /** Returns true if field crawlStartPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlStartPoint() {
    return __isset_bit_vector.get(__CRAWLSTARTPOINT_ISSET_ID);
  }

  public void setCrawlStartPointIsSet(boolean value) {
    __isset_bit_vector.set(__CRAWLSTARTPOINT_ISSET_ID, value);
  }

  public String getStartPointUrl() {
    return this.startPointUrl;
  }

  public PageDefinition setStartPointUrl(String startPointUrl) {
    this.startPointUrl = startPointUrl;
    return this;
  }

  public void unsetStartPointUrl() {
    this.startPointUrl = null;
  }

  /** Returns true if field startPointUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetStartPointUrl() {
    return this.startPointUrl != null;
  }

  public void setStartPointUrlIsSet(boolean value) {
    if (!value) {
      this.startPointUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDENTIFIER:
      if (value == null) {
        unsetIdentifier();
      } else {
        setIdentifier((String)value);
      }
      break;

    case METHODS:
      if (value == null) {
        unsetMethods();
      } else {
        setMethods((Set<MethodDefinition>)value);
      }
      break;

    case CRAWL_START_POINT:
      if (value == null) {
        unsetCrawlStartPoint();
      } else {
        setCrawlStartPoint((Boolean)value);
      }
      break;

    case START_POINT_URL:
      if (value == null) {
        unsetStartPointUrl();
      } else {
        setStartPointUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDENTIFIER:
      return getIdentifier();

    case METHODS:
      return getMethods();

    case CRAWL_START_POINT:
      return Boolean.valueOf(isCrawlStartPoint());

    case START_POINT_URL:
      return getStartPointUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDENTIFIER:
      return isSetIdentifier();
    case METHODS:
      return isSetMethods();
    case CRAWL_START_POINT:
      return isSetCrawlStartPoint();
    case START_POINT_URL:
      return isSetStartPointUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageDefinition)
      return this.equals((PageDefinition)that);
    return false;
  }

  public boolean equals(PageDefinition that) {
    if (that == null)
      return false;

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_methods = true && this.isSetMethods();
    boolean that_present_methods = true && that.isSetMethods();
    if (this_present_methods || that_present_methods) {
      if (!(this_present_methods && that_present_methods))
        return false;
      if (!this.methods.equals(that.methods))
        return false;
    }

    boolean this_present_crawlStartPoint = true;
    boolean that_present_crawlStartPoint = true;
    if (this_present_crawlStartPoint || that_present_crawlStartPoint) {
      if (!(this_present_crawlStartPoint && that_present_crawlStartPoint))
        return false;
      if (this.crawlStartPoint != that.crawlStartPoint)
        return false;
    }

    boolean this_present_startPointUrl = true && this.isSetStartPointUrl();
    boolean that_present_startPointUrl = true && that.isSetStartPointUrl();
    if (this_present_startPointUrl || that_present_startPointUrl) {
      if (!(this_present_startPointUrl && that_present_startPointUrl))
        return false;
      if (!this.startPointUrl.equals(that.startPointUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PageDefinition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PageDefinition typedOther = (PageDefinition)other;

    lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, typedOther.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethods()).compareTo(typedOther.isSetMethods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methods, typedOther.methods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlStartPoint()).compareTo(typedOther.isSetCrawlStartPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlStartPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlStartPoint, typedOther.crawlStartPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartPointUrl()).compareTo(typedOther.isSetStartPointUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartPointUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startPointUrl, typedOther.startPointUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageDefinition(");
    boolean first = true;

    sb.append("identifier:");
    if (this.identifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methods:");
    if (this.methods == null) {
      sb.append("null");
    } else {
      sb.append(this.methods);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crawlStartPoint:");
    sb.append(this.crawlStartPoint);
    first = false;
    if (isSetStartPointUrl()) {
      if (!first) sb.append(", ");
      sb.append("startPointUrl:");
      if (this.startPointUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.startPointUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageDefinitionStandardSchemeFactory implements SchemeFactory {
    public PageDefinitionStandardScheme getScheme() {
      return new PageDefinitionStandardScheme();
    }
  }

  private static class PageDefinitionStandardScheme extends StandardScheme<PageDefinition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageDefinition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifier = iprot.readString();
              struct.setIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METHODS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.methods = new HashSet<MethodDefinition>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  MethodDefinition _elem2; // required
                  _elem2 = new MethodDefinition();
                  _elem2.read(iprot);
                  struct.methods.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setMethodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CRAWL_START_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.crawlStartPoint = iprot.readBool();
              struct.setCrawlStartPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_POINT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startPointUrl = iprot.readString();
              struct.setStartPointUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageDefinition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.identifier);
        oprot.writeFieldEnd();
      }
      if (struct.methods != null) {
        oprot.writeFieldBegin(METHODS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.methods.size()));
          for (MethodDefinition _iter3 : struct.methods)
          {
            _iter3.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CRAWL_START_POINT_FIELD_DESC);
      oprot.writeBool(struct.crawlStartPoint);
      oprot.writeFieldEnd();
      if (struct.startPointUrl != null) {
        if (struct.isSetStartPointUrl()) {
          oprot.writeFieldBegin(START_POINT_URL_FIELD_DESC);
          oprot.writeString(struct.startPointUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageDefinitionTupleSchemeFactory implements SchemeFactory {
    public PageDefinitionTupleScheme getScheme() {
      return new PageDefinitionTupleScheme();
    }
  }

  private static class PageDefinitionTupleScheme extends TupleScheme<PageDefinition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdentifier()) {
        optionals.set(0);
      }
      if (struct.isSetMethods()) {
        optionals.set(1);
      }
      if (struct.isSetCrawlStartPoint()) {
        optionals.set(2);
      }
      if (struct.isSetStartPointUrl()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIdentifier()) {
        oprot.writeString(struct.identifier);
      }
      if (struct.isSetMethods()) {
        {
          oprot.writeI32(struct.methods.size());
          for (MethodDefinition _iter4 : struct.methods)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetCrawlStartPoint()) {
        oprot.writeBool(struct.crawlStartPoint);
      }
      if (struct.isSetStartPointUrl()) {
        oprot.writeString(struct.startPointUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.identifier = iprot.readString();
        struct.setIdentifierIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.methods = new HashSet<MethodDefinition>(2*_set5.size);
          for (int _i6 = 0; _i6 < _set5.size; ++_i6)
          {
            MethodDefinition _elem7; // required
            _elem7 = new MethodDefinition();
            _elem7.read(iprot);
            struct.methods.add(_elem7);
          }
        }
        struct.setMethodsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.crawlStartPoint = iprot.readBool();
        struct.setCrawlStartPointIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startPointUrl = iprot.readString();
        struct.setStartPointUrlIsSet(true);
      }
    }
  }

}

