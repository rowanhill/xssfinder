/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.xssfinder.remote;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MethodDefinition implements org.apache.thrift.TBase<MethodDefinition, MethodDefinition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MethodDefinition");

  private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RETURN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnType", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETERISED_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterised", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SUBMIT_ANNOTATED_FIELD_DESC = new org.apache.thrift.protocol.TField("submitAnnotated", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField CUSTOM_TRAVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("customTraversed", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MethodDefinitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MethodDefinitionTupleSchemeFactory());
  }

  public String identifier; // required
  public PageDefinition returnType; // required
  public boolean parameterised; // required
  public boolean submitAnnotated; // required
  public boolean customTraversed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDENTIFIER((short)1, "identifier"),
    RETURN_TYPE((short)2, "returnType"),
    PARAMETERISED((short)3, "parameterised"),
    SUBMIT_ANNOTATED((short)4, "submitAnnotated"),
    CUSTOM_TRAVERSED((short)5, "customTraversed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDENTIFIER
          return IDENTIFIER;
        case 2: // RETURN_TYPE
          return RETURN_TYPE;
        case 3: // PARAMETERISED
          return PARAMETERISED;
        case 4: // SUBMIT_ANNOTATED
          return SUBMIT_ANNOTATED;
        case 5: // CUSTOM_TRAVERSED
          return CUSTOM_TRAVERSED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARAMETERISED_ISSET_ID = 0;
  private static final int __SUBMITANNOTATED_ISSET_ID = 1;
  private static final int __CUSTOMTRAVERSED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("returnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageDefinition.class)));
    tmpMap.put(_Fields.PARAMETERISED, new org.apache.thrift.meta_data.FieldMetaData("parameterised", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUBMIT_ANNOTATED, new org.apache.thrift.meta_data.FieldMetaData("submitAnnotated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CUSTOM_TRAVERSED, new org.apache.thrift.meta_data.FieldMetaData("customTraversed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MethodDefinition.class, metaDataMap);
  }

  public MethodDefinition() {
  }

  public MethodDefinition(
    String identifier,
    PageDefinition returnType,
    boolean parameterised,
    boolean submitAnnotated,
    boolean customTraversed)
  {
    this();
    this.identifier = identifier;
    this.returnType = returnType;
    this.parameterised = parameterised;
    setParameterisedIsSet(true);
    this.submitAnnotated = submitAnnotated;
    setSubmitAnnotatedIsSet(true);
    this.customTraversed = customTraversed;
    setCustomTraversedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MethodDefinition(MethodDefinition other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    if (other.isSetReturnType()) {
      this.returnType = new PageDefinition(other.returnType);
    }
    this.parameterised = other.parameterised;
    this.submitAnnotated = other.submitAnnotated;
    this.customTraversed = other.customTraversed;
  }

  public MethodDefinition deepCopy() {
    return new MethodDefinition(this);
  }

  @Override
  public void clear() {
    this.identifier = null;
    this.returnType = null;
    setParameterisedIsSet(false);
    this.parameterised = false;
    setSubmitAnnotatedIsSet(false);
    this.submitAnnotated = false;
    setCustomTraversedIsSet(false);
    this.customTraversed = false;
  }

  public String getIdentifier() {
    return this.identifier;
  }

  public MethodDefinition setIdentifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  public PageDefinition getReturnType() {
    return this.returnType;
  }

  public MethodDefinition setReturnType(PageDefinition returnType) {
    this.returnType = returnType;
    return this;
  }

  public void unsetReturnType() {
    this.returnType = null;
  }

  /** Returns true if field returnType is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnType() {
    return this.returnType != null;
  }

  public void setReturnTypeIsSet(boolean value) {
    if (!value) {
      this.returnType = null;
    }
  }

  public boolean isParameterised() {
    return this.parameterised;
  }

  public MethodDefinition setParameterised(boolean parameterised) {
    this.parameterised = parameterised;
    setParameterisedIsSet(true);
    return this;
  }

  public void unsetParameterised() {
    __isset_bit_vector.clear(__PARAMETERISED_ISSET_ID);
  }

  /** Returns true if field parameterised is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterised() {
    return __isset_bit_vector.get(__PARAMETERISED_ISSET_ID);
  }

  public void setParameterisedIsSet(boolean value) {
    __isset_bit_vector.set(__PARAMETERISED_ISSET_ID, value);
  }

  public boolean isSubmitAnnotated() {
    return this.submitAnnotated;
  }

  public MethodDefinition setSubmitAnnotated(boolean submitAnnotated) {
    this.submitAnnotated = submitAnnotated;
    setSubmitAnnotatedIsSet(true);
    return this;
  }

  public void unsetSubmitAnnotated() {
    __isset_bit_vector.clear(__SUBMITANNOTATED_ISSET_ID);
  }

  /** Returns true if field submitAnnotated is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitAnnotated() {
    return __isset_bit_vector.get(__SUBMITANNOTATED_ISSET_ID);
  }

  public void setSubmitAnnotatedIsSet(boolean value) {
    __isset_bit_vector.set(__SUBMITANNOTATED_ISSET_ID, value);
  }

  public boolean isCustomTraversed() {
    return this.customTraversed;
  }

  public MethodDefinition setCustomTraversed(boolean customTraversed) {
    this.customTraversed = customTraversed;
    setCustomTraversedIsSet(true);
    return this;
  }

  public void unsetCustomTraversed() {
    __isset_bit_vector.clear(__CUSTOMTRAVERSED_ISSET_ID);
  }

  /** Returns true if field customTraversed is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomTraversed() {
    return __isset_bit_vector.get(__CUSTOMTRAVERSED_ISSET_ID);
  }

  public void setCustomTraversedIsSet(boolean value) {
    __isset_bit_vector.set(__CUSTOMTRAVERSED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDENTIFIER:
      if (value == null) {
        unsetIdentifier();
      } else {
        setIdentifier((String)value);
      }
      break;

    case RETURN_TYPE:
      if (value == null) {
        unsetReturnType();
      } else {
        setReturnType((PageDefinition)value);
      }
      break;

    case PARAMETERISED:
      if (value == null) {
        unsetParameterised();
      } else {
        setParameterised((Boolean)value);
      }
      break;

    case SUBMIT_ANNOTATED:
      if (value == null) {
        unsetSubmitAnnotated();
      } else {
        setSubmitAnnotated((Boolean)value);
      }
      break;

    case CUSTOM_TRAVERSED:
      if (value == null) {
        unsetCustomTraversed();
      } else {
        setCustomTraversed((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDENTIFIER:
      return getIdentifier();

    case RETURN_TYPE:
      return getReturnType();

    case PARAMETERISED:
      return Boolean.valueOf(isParameterised());

    case SUBMIT_ANNOTATED:
      return Boolean.valueOf(isSubmitAnnotated());

    case CUSTOM_TRAVERSED:
      return Boolean.valueOf(isCustomTraversed());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDENTIFIER:
      return isSetIdentifier();
    case RETURN_TYPE:
      return isSetReturnType();
    case PARAMETERISED:
      return isSetParameterised();
    case SUBMIT_ANNOTATED:
      return isSetSubmitAnnotated();
    case CUSTOM_TRAVERSED:
      return isSetCustomTraversed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MethodDefinition)
      return this.equals((MethodDefinition)that);
    return false;
  }

  public boolean equals(MethodDefinition that) {
    if (that == null)
      return false;

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_returnType = true && this.isSetReturnType();
    boolean that_present_returnType = true && that.isSetReturnType();
    if (this_present_returnType || that_present_returnType) {
      if (!(this_present_returnType && that_present_returnType))
        return false;
      if (!this.returnType.equals(that.returnType))
        return false;
    }

    boolean this_present_parameterised = true;
    boolean that_present_parameterised = true;
    if (this_present_parameterised || that_present_parameterised) {
      if (!(this_present_parameterised && that_present_parameterised))
        return false;
      if (this.parameterised != that.parameterised)
        return false;
    }

    boolean this_present_submitAnnotated = true;
    boolean that_present_submitAnnotated = true;
    if (this_present_submitAnnotated || that_present_submitAnnotated) {
      if (!(this_present_submitAnnotated && that_present_submitAnnotated))
        return false;
      if (this.submitAnnotated != that.submitAnnotated)
        return false;
    }

    boolean this_present_customTraversed = true;
    boolean that_present_customTraversed = true;
    if (this_present_customTraversed || that_present_customTraversed) {
      if (!(this_present_customTraversed && that_present_customTraversed))
        return false;
      if (this.customTraversed != that.customTraversed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MethodDefinition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MethodDefinition typedOther = (MethodDefinition)other;

    lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, typedOther.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnType()).compareTo(typedOther.isSetReturnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnType, typedOther.returnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterised()).compareTo(typedOther.isSetParameterised());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterised()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterised, typedOther.parameterised);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitAnnotated()).compareTo(typedOther.isSetSubmitAnnotated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitAnnotated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitAnnotated, typedOther.submitAnnotated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomTraversed()).compareTo(typedOther.isSetCustomTraversed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomTraversed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customTraversed, typedOther.customTraversed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MethodDefinition(");
    boolean first = true;

    sb.append("identifier:");
    if (this.identifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnType:");
    if (this.returnType == null) {
      sb.append("null");
    } else {
      sb.append(this.returnType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterised:");
    sb.append(this.parameterised);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitAnnotated:");
    sb.append(this.submitAnnotated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customTraversed:");
    sb.append(this.customTraversed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MethodDefinitionStandardSchemeFactory implements SchemeFactory {
    public MethodDefinitionStandardScheme getScheme() {
      return new MethodDefinitionStandardScheme();
    }
  }

  private static class MethodDefinitionStandardScheme extends StandardScheme<MethodDefinition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MethodDefinition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifier = iprot.readString();
              struct.setIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RETURN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.returnType = new PageDefinition();
              struct.returnType.read(iprot);
              struct.setReturnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETERISED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parameterised = iprot.readBool();
              struct.setParameterisedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBMIT_ANNOTATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.submitAnnotated = iprot.readBool();
              struct.setSubmitAnnotatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUSTOM_TRAVERSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.customTraversed = iprot.readBool();
              struct.setCustomTraversedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MethodDefinition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.identifier);
        oprot.writeFieldEnd();
      }
      if (struct.returnType != null) {
        oprot.writeFieldBegin(RETURN_TYPE_FIELD_DESC);
        struct.returnType.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARAMETERISED_FIELD_DESC);
      oprot.writeBool(struct.parameterised);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBMIT_ANNOTATED_FIELD_DESC);
      oprot.writeBool(struct.submitAnnotated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUSTOM_TRAVERSED_FIELD_DESC);
      oprot.writeBool(struct.customTraversed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MethodDefinitionTupleSchemeFactory implements SchemeFactory {
    public MethodDefinitionTupleScheme getScheme() {
      return new MethodDefinitionTupleScheme();
    }
  }

  private static class MethodDefinitionTupleScheme extends TupleScheme<MethodDefinition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MethodDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdentifier()) {
        optionals.set(0);
      }
      if (struct.isSetReturnType()) {
        optionals.set(1);
      }
      if (struct.isSetParameterised()) {
        optionals.set(2);
      }
      if (struct.isSetSubmitAnnotated()) {
        optionals.set(3);
      }
      if (struct.isSetCustomTraversed()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIdentifier()) {
        oprot.writeString(struct.identifier);
      }
      if (struct.isSetReturnType()) {
        struct.returnType.write(oprot);
      }
      if (struct.isSetParameterised()) {
        oprot.writeBool(struct.parameterised);
      }
      if (struct.isSetSubmitAnnotated()) {
        oprot.writeBool(struct.submitAnnotated);
      }
      if (struct.isSetCustomTraversed()) {
        oprot.writeBool(struct.customTraversed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MethodDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.identifier = iprot.readString();
        struct.setIdentifierIsSet(true);
      }
      if (incoming.get(1)) {
        struct.returnType = new PageDefinition();
        struct.returnType.read(iprot);
        struct.setReturnTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parameterised = iprot.readBool();
        struct.setParameterisedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.submitAnnotated = iprot.readBool();
        struct.setSubmitAnnotatedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.customTraversed = iprot.readBool();
        struct.setCustomTraversedIsSet(true);
      }
    }
  }

}

