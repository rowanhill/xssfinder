<?php
namespace XssFinderRemote;
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['\XssFinderRemote\E_TraversalMode'] = array(
  'NORMAL' => 0,
  'SUBMIT' => 1,
);

final class TraversalMode {
  const NORMAL = 0;
  const SUBMIT = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'SUBMIT',
  );
}

class PageDefinition {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'PageDefinition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageDefinition');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MethodDefinition {
  static $_TSPEC;

  public $identifier = null;
  public $returnTypeIdentifier = null;
  public $owningTypeIdentifier = null;
  public $parameterised = null;
  public $submitAnnotated = null;
  public $customTraversed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'identifier',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'returnTypeIdentifier',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'owningTypeIdentifier',
          'type' => \TType::STRING,
          ),
        4 => array(
          'var' => 'parameterised',
          'type' => \TType::BOOL,
          ),
        5 => array(
          'var' => 'submitAnnotated',
          'type' => \TType::BOOL,
          ),
        6 => array(
          'var' => 'customTraversed',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['returnTypeIdentifier'])) {
        $this->returnTypeIdentifier = $vals['returnTypeIdentifier'];
      }
      if (isset($vals['owningTypeIdentifier'])) {
        $this->owningTypeIdentifier = $vals['owningTypeIdentifier'];
      }
      if (isset($vals['parameterised'])) {
        $this->parameterised = $vals['parameterised'];
      }
      if (isset($vals['submitAnnotated'])) {
        $this->submitAnnotated = $vals['submitAnnotated'];
      }
      if (isset($vals['customTraversed'])) {
        $this->customTraversed = $vals['customTraversed'];
      }
    }
  }

  public function getName() {
    return 'MethodDefinition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->returnTypeIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->owningTypeIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->parameterised);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->submitAnnotated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->customTraversed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MethodDefinition');
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', \TType::STRING, 1);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->returnTypeIdentifier !== null) {
      $xfer += $output->writeFieldBegin('returnTypeIdentifier', \TType::STRING, 2);
      $xfer += $output->writeString($this->returnTypeIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->owningTypeIdentifier !== null) {
      $xfer += $output->writeFieldBegin('owningTypeIdentifier', \TType::STRING, 3);
      $xfer += $output->writeString($this->owningTypeIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterised !== null) {
      $xfer += $output->writeFieldBegin('parameterised', \TType::BOOL, 4);
      $xfer += $output->writeBool($this->parameterised);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->submitAnnotated !== null) {
      $xfer += $output->writeFieldBegin('submitAnnotated', \TType::BOOL, 5);
      $xfer += $output->writeBool($this->submitAnnotated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customTraversed !== null) {
      $xfer += $output->writeFieldBegin('customTraversed', \TType::BOOL, 6);
      $xfer += $output->writeBool($this->customTraversed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PageDefinition {
  static $_TSPEC;

  public $identifier = null;
  public $methods = null;
  public $crawlStartPoint = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'identifier',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'methods',
          'type' => \TType::SET,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'type' => \TType::STRUCT,
            'class' => '\XssFinderRemote\MethodDefinition',
            ),
          ),
        3 => array(
          'var' => 'crawlStartPoint',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['methods'])) {
        $this->methods = $vals['methods'];
      }
      if (isset($vals['crawlStartPoint'])) {
        $this->crawlStartPoint = $vals['crawlStartPoint'];
      }
    }
  }

  public function getName() {
    return 'PageDefinition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::SET) {
            $this->methods = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \XssFinderRemote\MethodDefinition();
              $xfer += $elem5->read($input);
              if (is_scalar($elem5)) {
                $this->methods[$elem5] = true;
              } else {
                $this->methods []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->crawlStartPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageDefinition');
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', \TType::STRING, 1);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->methods !== null) {
      if (!is_array($this->methods)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('methods', \TType::SET, 2);
      {
        $output->writeSetBegin(\TType::STRUCT, count($this->methods));
        {
          foreach ($this->methods as $iter6 => $iter7)
          {
            if (is_scalar($iter7)) {
            $xfer += $iter6->write($output);
            } else {
            $xfer += $iter7->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->crawlStartPoint !== null) {
      $xfer += $output->writeFieldBegin('crawlStartPoint', \TType::BOOL, 3);
      $xfer += $output->writeBool($this->crawlStartPoint);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TUntraversableException extends \TException {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TUntraversableException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TUntraversableException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TLifecycleEventHandlerException extends \TException {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TLifecycleEventHandlerException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TLifecycleEventHandlerException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TWebInteractionException extends \TException {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TWebInteractionException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TWebInteractionException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
