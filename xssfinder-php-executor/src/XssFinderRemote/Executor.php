<?php
namespace XssFinderRemote;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


interface ExecutorIf {
  public function getPageDefinitions($namespaceIdentifier);
  public function startRoute($pageIdentifier);
  public function putXssAttackStringsInInputs();
  public function getCurrentXssIds();
  public function getFormCount();
  public function traverseMethod(\XssFinderRemote\MethodDefinition $method, $mode);
  public function invokeAfterRouteHandler($rootPageIdentifier);
}

class ExecutorClient implements \XssFinderRemote\ExecutorIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getPageDefinitions($namespaceIdentifier)
  {
    $this->send_getPageDefinitions($namespaceIdentifier);
    return $this->recv_getPageDefinitions();
  }

  public function send_getPageDefinitions($namespaceIdentifier)
  {
    $args = new \XssFinderRemote\Executor_getPageDefinitions_args();
    $args->namespaceIdentifier = $namespaceIdentifier;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPageDefinitions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPageDefinitions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPageDefinitions()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_getPageDefinitions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_getPageDefinitions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPageDefinitions failed: unknown result");
  }

  public function startRoute($pageIdentifier)
  {
    $this->send_startRoute($pageIdentifier);
    $this->recv_startRoute();
  }

  public function send_startRoute($pageIdentifier)
  {
    $args = new \XssFinderRemote\Executor_startRoute_args();
    $args->pageIdentifier = $pageIdentifier;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startRoute', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startRoute', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startRoute()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_startRoute_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_startRoute_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->webInteraction !== null) {
      throw $result->webInteraction;
    }
    return;
  }

  public function putXssAttackStringsInInputs()
  {
    $this->send_putXssAttackStringsInInputs();
    return $this->recv_putXssAttackStringsInInputs();
  }

  public function send_putXssAttackStringsInInputs()
  {
    $args = new \XssFinderRemote\Executor_putXssAttackStringsInInputs_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'putXssAttackStringsInInputs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('putXssAttackStringsInInputs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_putXssAttackStringsInInputs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_putXssAttackStringsInInputs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_putXssAttackStringsInInputs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->webInteraction !== null) {
      throw $result->webInteraction;
    }
    throw new \Exception("putXssAttackStringsInInputs failed: unknown result");
  }

  public function getCurrentXssIds()
  {
    $this->send_getCurrentXssIds();
    return $this->recv_getCurrentXssIds();
  }

  public function send_getCurrentXssIds()
  {
    $args = new \XssFinderRemote\Executor_getCurrentXssIds_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCurrentXssIds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCurrentXssIds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCurrentXssIds()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_getCurrentXssIds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_getCurrentXssIds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->webInteraction !== null) {
      throw $result->webInteraction;
    }
    throw new \Exception("getCurrentXssIds failed: unknown result");
  }

  public function getFormCount()
  {
    $this->send_getFormCount();
    return $this->recv_getFormCount();
  }

  public function send_getFormCount()
  {
    $args = new \XssFinderRemote\Executor_getFormCount_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFormCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFormCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFormCount()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_getFormCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_getFormCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->webInteraction !== null) {
      throw $result->webInteraction;
    }
    throw new \Exception("getFormCount failed: unknown result");
  }

  public function traverseMethod(\XssFinderRemote\MethodDefinition $method, $mode)
  {
    $this->send_traverseMethod($method, $mode);
    return $this->recv_traverseMethod();
  }

  public function send_traverseMethod(\XssFinderRemote\MethodDefinition $method, $mode)
  {
    $args = new \XssFinderRemote\Executor_traverseMethod_args();
    $args->method = $method;
    $args->mode = $mode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'traverseMethod', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('traverseMethod', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_traverseMethod()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_traverseMethod_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_traverseMethod_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->untraversable !== null) {
      throw $result->untraversable;
    }
    if ($result->webInteraction !== null) {
      throw $result->webInteraction;
    }
    throw new \Exception("traverseMethod failed: unknown result");
  }

  public function invokeAfterRouteHandler($rootPageIdentifier)
  {
    $this->send_invokeAfterRouteHandler($rootPageIdentifier);
    $this->recv_invokeAfterRouteHandler();
  }

  public function send_invokeAfterRouteHandler($rootPageIdentifier)
  {
    $args = new \XssFinderRemote\Executor_invokeAfterRouteHandler_args();
    $args->rootPageIdentifier = $rootPageIdentifier;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'invokeAfterRouteHandler', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('invokeAfterRouteHandler', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_invokeAfterRouteHandler()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\XssFinderRemote\Executor_invokeAfterRouteHandler_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \XssFinderRemote\Executor_invokeAfterRouteHandler_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->webInteraction !== null) {
      throw $result->webInteraction;
    }
    if ($result->lifecycleEventHandler !== null) {
      throw $result->lifecycleEventHandler;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Executor_getPageDefinitions_args {
  static $_TSPEC;

  public $namespaceIdentifier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'namespaceIdentifier',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['namespaceIdentifier'])) {
        $this->namespaceIdentifier = $vals['namespaceIdentifier'];
      }
    }
  }

  public function getName() {
    return 'Executor_getPageDefinitions_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->namespaceIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_getPageDefinitions_args');
    if ($this->namespaceIdentifier !== null) {
      $xfer += $output->writeFieldBegin('namespaceIdentifier', TType::STRING, 1);
      $xfer += $output->writeString($this->namespaceIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_getPageDefinitions_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\XssFinderRemote\PageDefinition',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Executor_getPageDefinitions_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size8 = 0;
            $_etype11 = 0;
            $xfer += $input->readSetBegin($_etype11, $_size8);
            for ($_i12 = 0; $_i12 < $_size8; ++$_i12)
            {
              $elem13 = null;
              $elem13 = new \XssFinderRemote\PageDefinition();
              $xfer += $elem13->read($input);
              if (is_scalar($elem13)) {
                $this->success[$elem13] = true;
              } else {
                $this->success []= $elem13;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_getPageDefinitions_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter14 => $iter15)
          {
            if (is_scalar($iter15)) {
            $xfer += $iter14->write($output);
            } else {
            $xfer += $iter15->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_startRoute_args {
  static $_TSPEC;

  public $pageIdentifier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageIdentifier',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageIdentifier'])) {
        $this->pageIdentifier = $vals['pageIdentifier'];
      }
    }
  }

  public function getName() {
    return 'Executor_startRoute_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pageIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_startRoute_args');
    if ($this->pageIdentifier !== null) {
      $xfer += $output->writeFieldBegin('pageIdentifier', TType::STRING, 1);
      $xfer += $output->writeString($this->pageIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_startRoute_result {
  static $_TSPEC;

  public $webInteraction = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'webInteraction',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TWebInteractionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['webInteraction'])) {
        $this->webInteraction = $vals['webInteraction'];
      }
    }
  }

  public function getName() {
    return 'Executor_startRoute_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->webInteraction = new \XssFinderRemote\TWebInteractionException();
            $xfer += $this->webInteraction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_startRoute_result');
    if ($this->webInteraction !== null) {
      $xfer += $output->writeFieldBegin('webInteraction', TType::STRUCT, 1);
      $xfer += $this->webInteraction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_putXssAttackStringsInInputs_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Executor_putXssAttackStringsInInputs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_putXssAttackStringsInInputs_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_putXssAttackStringsInInputs_result {
  static $_TSPEC;

  public $success = null;
  public $webInteraction = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'webInteraction',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TWebInteractionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['webInteraction'])) {
        $this->webInteraction = $vals['webInteraction'];
      }
    }
  }

  public function getName() {
    return 'Executor_putXssAttackStringsInInputs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = '';
              $val22 = '';
              $xfer += $input->readString($key21);
              $xfer += $input->readString($val22);
              $this->success[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->webInteraction = new \XssFinderRemote\TWebInteractionException();
            $xfer += $this->webInteraction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_putXssAttackStringsInInputs_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter23 => $viter24)
          {
            $xfer += $output->writeString($kiter23);
            $xfer += $output->writeString($viter24);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webInteraction !== null) {
      $xfer += $output->writeFieldBegin('webInteraction', TType::STRUCT, 1);
      $xfer += $this->webInteraction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_getCurrentXssIds_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Executor_getCurrentXssIds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_getCurrentXssIds_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_getCurrentXssIds_result {
  static $_TSPEC;

  public $success = null;
  public $webInteraction = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'webInteraction',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TWebInteractionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['webInteraction'])) {
        $this->webInteraction = $vals['webInteraction'];
      }
    }
  }

  public function getName() {
    return 'Executor_getCurrentXssIds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size25 = 0;
            $_etype28 = 0;
            $xfer += $input->readSetBegin($_etype28, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $elem30 = null;
              $xfer += $input->readString($elem30);
              if (is_scalar($elem30)) {
                $this->success[$elem30] = true;
              } else {
                $this->success []= $elem30;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->webInteraction = new \XssFinderRemote\TWebInteractionException();
            $xfer += $this->webInteraction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_getCurrentXssIds_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter31 => $iter32)
          {
            if (is_scalar($iter32)) {
            $xfer += $output->writeString($iter31);
            } else {
            $xfer += $output->writeString($iter32);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webInteraction !== null) {
      $xfer += $output->writeFieldBegin('webInteraction', TType::STRUCT, 1);
      $xfer += $this->webInteraction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_getFormCount_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Executor_getFormCount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_getFormCount_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_getFormCount_result {
  static $_TSPEC;

  public $success = null;
  public $webInteraction = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'webInteraction',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TWebInteractionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['webInteraction'])) {
        $this->webInteraction = $vals['webInteraction'];
      }
    }
  }

  public function getName() {
    return 'Executor_getFormCount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->webInteraction = new \XssFinderRemote\TWebInteractionException();
            $xfer += $this->webInteraction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_getFormCount_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webInteraction !== null) {
      $xfer += $output->writeFieldBegin('webInteraction', TType::STRUCT, 1);
      $xfer += $this->webInteraction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_traverseMethod_args {
  static $_TSPEC;

  public $method = null;
  public $mode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'method',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\MethodDefinition',
          ),
        2 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'Executor_traverseMethod_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->method = new \XssFinderRemote\MethodDefinition();
            $xfer += $this->method->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_traverseMethod_args');
    if ($this->method !== null) {
      if (!is_object($this->method)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('method', TType::STRUCT, 1);
      $xfer += $this->method->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 2);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_traverseMethod_result {
  static $_TSPEC;

  public $success = null;
  public $untraversable = null;
  public $webInteraction = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'untraversable',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TUntraversableException',
          ),
        2 => array(
          'var' => 'webInteraction',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TWebInteractionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['untraversable'])) {
        $this->untraversable = $vals['untraversable'];
      }
      if (isset($vals['webInteraction'])) {
        $this->webInteraction = $vals['webInteraction'];
      }
    }
  }

  public function getName() {
    return 'Executor_traverseMethod_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size33 = 0;
            $_ktype34 = 0;
            $_vtype35 = 0;
            $xfer += $input->readMapBegin($_ktype34, $_vtype35, $_size33);
            for ($_i37 = 0; $_i37 < $_size33; ++$_i37)
            {
              $key38 = '';
              $val39 = '';
              $xfer += $input->readString($key38);
              $xfer += $input->readString($val39);
              $this->success[$key38] = $val39;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->untraversable = new \XssFinderRemote\TUntraversableException();
            $xfer += $this->untraversable->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->webInteraction = new \XssFinderRemote\TWebInteractionException();
            $xfer += $this->webInteraction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_traverseMethod_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter40 => $viter41)
          {
            $xfer += $output->writeString($kiter40);
            $xfer += $output->writeString($viter41);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->untraversable !== null) {
      $xfer += $output->writeFieldBegin('untraversable', TType::STRUCT, 1);
      $xfer += $this->untraversable->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webInteraction !== null) {
      $xfer += $output->writeFieldBegin('webInteraction', TType::STRUCT, 2);
      $xfer += $this->webInteraction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_invokeAfterRouteHandler_args {
  static $_TSPEC;

  public $rootPageIdentifier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rootPageIdentifier',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rootPageIdentifier'])) {
        $this->rootPageIdentifier = $vals['rootPageIdentifier'];
      }
    }
  }

  public function getName() {
    return 'Executor_invokeAfterRouteHandler_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rootPageIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_invokeAfterRouteHandler_args');
    if ($this->rootPageIdentifier !== null) {
      $xfer += $output->writeFieldBegin('rootPageIdentifier', TType::STRING, 1);
      $xfer += $output->writeString($this->rootPageIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Executor_invokeAfterRouteHandler_result {
  static $_TSPEC;

  public $webInteraction = null;
  public $lifecycleEventHandler = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'webInteraction',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TWebInteractionException',
          ),
        2 => array(
          'var' => 'lifecycleEventHandler',
          'type' => TType::STRUCT,
          'class' => '\XssFinderRemote\TLifecycleEventHandlerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['webInteraction'])) {
        $this->webInteraction = $vals['webInteraction'];
      }
      if (isset($vals['lifecycleEventHandler'])) {
        $this->lifecycleEventHandler = $vals['lifecycleEventHandler'];
      }
    }
  }

  public function getName() {
    return 'Executor_invokeAfterRouteHandler_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->webInteraction = new \XssFinderRemote\TWebInteractionException();
            $xfer += $this->webInteraction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->lifecycleEventHandler = new \XssFinderRemote\TLifecycleEventHandlerException();
            $xfer += $this->lifecycleEventHandler->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Executor_invokeAfterRouteHandler_result');
    if ($this->webInteraction !== null) {
      $xfer += $output->writeFieldBegin('webInteraction', TType::STRUCT, 1);
      $xfer += $this->webInteraction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lifecycleEventHandler !== null) {
      $xfer += $output->writeFieldBegin('lifecycleEventHandler', TType::STRUCT, 2);
      $xfer += $this->lifecycleEventHandler->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


